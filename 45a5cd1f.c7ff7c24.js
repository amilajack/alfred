(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{150:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return p})),r.d(t,"default",(function(){return s}));var n=r(1),o=r(10),a=(r(0),r(169)),i={id:"concepts",title:"Concepts"},l={id:"concepts",title:"Concepts",description:"## Projects",source:"@site/docs/concepts.md",permalink:"/docs/concepts",sidebar:"docs",previous:{title:"Migrating to Alfred",permalink:"/docs/migrating-to-alfred"},next:{title:"Skills",permalink:"/docs/skills"}},p=[{value:"Projects",id:"projects",children:[]},{value:"Platforms",id:"platforms",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]},{value:"Targets",id:"targets",children:[]}],c={rightToc:p};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"projects"},"Projects"),Object(a.b)("p",null,"Most projects are either one of two types: an app or a library. Alfred calls these different project types 'projects'. Alfred uses these project types to determine how it should bundle your project."),Object(a.b)("h2",{id:"platforms"},"Platforms"),Object(a.b)("p",null,"JavaScript can run on many possible platforms, including NodeJS, the browser, electron, and others. At the moment, Alfred only supports the NodeJS and the browser."),Object(a.b)("h4",{id:"planned-platform-additions"},"Planned Platform Additions"),Object(a.b)("p",null,"In the near future, Alfred will add support for ",Object(a.b)("inlineCode",{parentName:"p"},"electron")," and ",Object(a.b)("inlineCode",{parentName:"p"},"react-native")," platforms. These platforms are not added yet because beacuse they are not supported by any ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"skills"}),"skills")," yet."),Object(a.b)("h2",{id:"entrypoints"},"Entrypoints"),Object(a.b)("p",null,"Entrypoints are files that serve as the 'starting point' of an Alfred project. Alfred entrypoints serve two main purposes:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Determine what the ",Object(a.b)("inlineCode",{parentName:"li"},"platform")," and ",Object(a.b)("inlineCode",{parentName:"li"},"project")," are"),Object(a.b)("li",{parentName:"ul"},"Serve as the entrypoint for bundlers such as webpack, rollup, and parcel")),Object(a.b)("p",null,"Here are some examples of entrypoints:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"lib.browser.js")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"app.node.js")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"app.browser.js"))),Object(a.b)("p",null,"As you can see, entrypoint files always follow the form ",Object(a.b)("inlineCode",{parentName:"p"},"{project}.{platform}.js"),". These way of defining entrypoints allows you to easily add multiple entrypoints. Alfred will process each entrypoint with respect to its project and platform."),Object(a.b)("h2",{id:"targets"},"Targets"),Object(a.b)("p",null,"A target is simpliy the output of an Alfred build. The output a  bundlers depend on three factors: the environment, ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"projects"}),"project"),", and ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"platforms"}),"platform"),". The environment can either be ",Object(a.b)("inlineCode",{parentName:"p"},"development"),", ",Object(a.b)("inlineCode",{parentName:"p"},"production"),", or ",Object(a.b)("inlineCode",{parentName:"p"},"test"),". Alfred targets are outputted to a ",Object(a.b)("inlineCode",{parentName:"p"},"targets/{environment}/{project}.{platform}.js")," directory."))}s.isMDXComponent=!0},169:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return f}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l({},t,{},e)),r},b=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),b=s(r),d=n,f=b["".concat(i,".").concat(d)]||b[d]||u[d]||a;return r?o.a.createElement(f,l({ref:t},c,{components:r})):o.a.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);