(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{55:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(7),o=(n(0),n(91)),i={title:"Alfred - A Modular Toolchain for JavaScript",author:"Amila Welihinda",authorURL:"http://twitter.com/amilajack"},l={permalink:"/blog/2020/03/20/alfred",source:"@site/blog/2020-03-20-alfred.md",description:"What is Alfred? TL;DR",date:"2020-03-20T00:00:00.000Z",tags:[],title:"Alfred - A Modular Toolchain for JavaScript",readingTime:10.02,truncated:!1,nextItem:{title:"Hello World",permalink:"/blog/2017/10/24/new-version-1.0.0"}},s=[],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"what-is-alfred-tldr"},"What is Alfred? TL;DR"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"An alternative to boilerplates / starter kits"),Object(o.b)("li",{parentName:"ul"},"Better tooling, out of the box"),Object(o.b)("li",{parentName:"ul"},"A solution to brittle and complex JS infrastructure")),Object(o.b)("h1",{id:"the-background"},"The Background"),Object(o.b)("p",null,"Maintaining over 200 open source JavaScript projects for the last 6 years has exposed me to the best and worst parts of JavaScript infrastructure. JavaScript infrastructure shines when it comes to flexibility. They make few assumptions about the user of the tools, but they don't assume you'll be using other tools. Making no assumptions is nice because it allows users to use whatever tools they want. Infrastructure usually doesn't come with integration for other tools out of the box support so integration is usually added by 3rd party plugins. This model for infrastructure is convenient because it allows developers to write plugins which extend the functionality of the tools they use, therefore allowing the tools to be used in a much wider range of scenarios than anticipated by maintainers. The downside of this customizability is that the tools usually don\u2019t work out of the box. This comes at a huge cost to the user experience of beginners who have never used that tool before."),Object(o.b)("p",null,"The JS ecosystem responds to this complexity by creating \u2018",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/search?q=boilerplate"}),"boilerplates\u2019"),", or ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/topics/starter-kit"}),"\u2018starter kits\u2019"),", which are essentially template projects that have their infrastructure preconfigured for the tools the template project supports. For example, ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/electron-react-boilerplate/electron-react-boilerplate"}),Object(o.b)("inlineCode",{parentName:"a"},"electron-react-boilerplate"))," is a boilerplate that configures electron, react, eslint, webpack, and jest. Boilerplates solve the out-of-the-box problem but they sacrifice extensibility because they don\u2019t expect users to change the tools they come with or even change the configurations of those tools."),Object(o.b)("p",null,"Alfred proposes a new solution that allows each tool to configure itself with respect to other tools. To better understand Alfred\u2019s solution, it is important to dive deeper into the current problems of JS infrastructure."),Object(o.b)("h1",{id:"the-problem"},"The Problem"),Object(o.b)("h4",{id:"js-tooling-is-brittle"},"JS Tooling is Brittle"),Object(o.b)("p",null,"When trying new tools, newcomers often spend a significant amount of time configuring tools. The difficulty of configuring a tool or library can discourage the user from using the it alltogether. Even users of widely adopted libraries and tools tend to experience issues related to configuration. The tweet below describes the situation well:"),Object(o.b)("p",null,'"Looking at the issues on ',Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/storybookjs/storybook"}),Object(o.b)("inlineCode",{parentName:"a"},"storybooks/storybook")),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"2,479 total issues"),Object(o.b)("li",{parentName:"ul"},'732 mention "webpack" (30%)'),Object(o.b)("li",{parentName:"ul"},'428 mention "babel" (17%)')),Object(o.b)("p",null,"That's crazy! Other keywords that come up that often would be treated as requiring architectural change, but those are just for configuration.\""),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},'It\'s a little mind-boggling how many issues are purely for dealing with Babel or Webpack configuration. And those are by far some of the most frustrating issues to debug when you do run into them. So much time wasted. Makes you really understand the "zero config" movement.')),Object(o.b)("h4",{id:"incorrect-suboptimal-infrastructure"},"Incorrect, Suboptimal Infrastructure"),Object(o.b)("p",null,"One of the great strengths of JS tooling is its customizability. This customizability allows JS tools to be used in a wide different use cases. But leaving the configuration of tools up to users allows for the possibility of misconfiguring tools, which often results in tools that are used sub-optimally or even incorrectly. For example, it is common for libraries to ship with polyfills or compiled code. This is considered an anti pattern because this makes it harder for applications to optimize apps which use the libraries (",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Tree_shaking"}),"tree shaking"),") and it increases the bundle sizes of apps that use the libraries."),Object(o.b)("h1",{id:"the-solution"},"The Solution"),Object(o.b)("p",null,"Alfred aims to solve these problems by enabling tools to configure themselves out of the box. Each tool should know how to configure itself so that it can be compatible with other tools the user is using. Alfred achieves this 'out of the box' solution by generating minimal configurations for the user's tools. Advanced users can override or extend generated configurations. Alfred tests each combination of tools before publishing new versions."),Object(o.b)("h4",{id:"skills"},"Skills"),Object(o.b)("p",null,"A ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://alfred.js.org/docs/skills/"}),"skill"))," is an abstraction over a tool that allows it to configure itself with respect to other tools. For example, a babel \u2018skill\u2019 which wants to add react support would add the ",Object(o.b)("inlineCode",{parentName:"p"},"babel-preset-react")," preset to its config if the user is using the react skill."),Object(o.b)("p",null,"Here is an example of a skill:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'export default {\n  name: "eslint",\n  devDependencies: {\n    "eslint-config-airbnb": "18.0.0"\n  },\n  configs: [\n    {\n      // Config\'s filename\n      filename: ".eslintrc.js",\n      // The base eslint config\n      config: {\n        plugins: ["eslint-plugin-prettier"]\n      }\n    }\n  ],\n  transforms: {\n    // Make eslint config compatible with react\n    react(eslintSkill) {\n      return eslintSkill\n        .extendConfig("eslint", {\n          plugins: ["eslint-plugin-react"]\n        })\n        .addDevDeps({\n          "eslint-plugin-react": "7.18.0"\n        });\n    }\n  }\n};\n')),Object(o.b)("p",null,"For more on skills, see the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://alfred.js.org/docs/skills/"}),"skills section of the docs"),"."),Object(o.b)("p",null,"Alfred comes with skills out of the box but it also allows users to use 3rd party skills as well. Users can customize configs through Alfred's configs:"),Object(o.b)("p",null,"Here is an example of what an Alfred config looks like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'// package.json\n{\n  // ...\n  "alfred": {\n    "skills": [\n      [\n        "@alfred/skill-eslint",\n        // A which extends the generated config\n        {\n          "extends": ["eslint-config-airbnb"],\n          "rules": {\n            "no-console": "off"\n          }\n        }\n      ]\n    ]\n  }\n}\n')),Object(o.b)("h4",{id:"entrypoints"},"Entrypoints"),Object(o.b)("p",null,"Alfred formalizes the concept of ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://alfred.js.org/docs/concepts#entrypoints"}),"entrypoints")),", which are files that determine the project type and platform a project will run on. For example, the entrypoint ",Object(o.b)("inlineCode",{parentName:"p"},"src/app.browser.js")," will be built as a browser app, app being the project type and 'browser' being the platform. Entrypoints determine which skills should be used to act on the entrypoint for a specific subcommand. Running the ",Object(o.b)("inlineCode",{parentName:"p"},"build")," subcommand on a project that has a ",Object(o.b)("inlineCode",{parentName:"p"},"./src/lib.browser.js")," entrypoint should build the entrypoint with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://rollupjs.org/"}),"rollup"),", a bundler that is optimal for libraries."),Object(o.b)("p",null,"Skills can declare which project types, platforms, and environments they support. Here's how the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://parceljs.org/"}),"parcel")," skill defines which environments, platforms, and projects it supports:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const supports = {\n  envs: ["production", "development", "test"],\n  platforms: ["browser", "node"],\n  projects: ["lib"]\n};\n\nexport default {\n  name: "rollup",\n  tasks: [\n    ["@alfred/task-build", { supports }],\n    ["@alfred/task-start", { supports }]\n  ],\n  // ...\n};\n')),Object(o.b)("h4",{id:"tasks"},"Tasks"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://alfred.js.org/docs/tasks"}),Object(o.b)("em",{parentName:"a"},"Tasks"))," determine which skill should be used when a certain subcommand is called. For example, when ",Object(o.b)("inlineCode",{parentName:"p"},"alfred run build")," is called, either the parcel, webpack, or rollup skill could be used. They also specify how skills are called and provide information about the task. Below is an example of a task:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// @alfred/task-build\nexport default {\n  subcommand: "build",\n  description: "Build, optimize, and bundle assets in your app",\n  runForEachTarget: true,\n  resolveSkill(skills, target) {\n    // return whichever skill you want to resolve...\n  }\n};\n')),Object(o.b)("p",null,"Skills can then implement certain tasks:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'export default {\n  name: "parcel",\n  tasks: ["@alfred/task-build", "@alfred/task-start"],\n  // ...\n};\n')),Object(o.b)("p",null,"Tasks allow for skills to be interchanged while maintaining a consistent developer workflow. For example, all skills that lint a user\u2019s project will use the ",Object(o.b)("inlineCode",{parentName:"p"},"@alfred/task-lint")," task so all of these skills are invoked through the ",Object(o.b)("inlineCode",{parentName:"p"},"lint")," subcommand that the task registers."),Object(o.b)("p",null,"Alfred comes with the following tasks built-in: ",Object(o.b)("inlineCode",{parentName:"p"},"build"),", ",Object(o.b)("inlineCode",{parentName:"p"},"start"),", ",Object(o.b)("inlineCode",{parentName:"p"},"lint"),", ",Object(o.b)("inlineCode",{parentName:"p"},"format"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"test"),"."),Object(o.b)("h4",{id:"files-and-directories"},"Files and Directories"),Object(o.b)("p",null,"Sometimes, adding or changing configuration may not be enough to add support for a certain tool or library. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/"}),"Redux"),", for example, requires ",Object(o.b)("inlineCode",{parentName:"p"},"configureStore.js"),", ",Object(o.b)("inlineCode",{parentName:"p"},"root.js"),", and other files. To allow skills to fully add out of the box support for tools they wrap, Alfred allows them to define ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://alfred.js.org/docs/files-and-directories"}),"files and directories")," which are added to the user's project. Similar to configs, ",Object(o.b)("em",{parentName:"p"},"files")," can also be modified by skill ",Object(o.b)("em",{parentName:"p"},"transforms"),". Below is an example of how the redux skill transforms the ",Object(o.b)("inlineCode",{parentName:"p"},"configureStore.prod.js")," file to be compatible with typescript:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'export default {\n  name: "redux",\n  files: [\n    {\n      alias: "configureStore.prod",\n      src: path.join(__dirname, "../boilerplate/store/configureStore.prod.js"),\n      dest: "src/store/configureStore.prod.js"\n    }\n    // ...\n  ],\n  transforms: {\n    typescript(skill) {\n      skill.files\n        .get("configureStore.prod")\n        .rename("configureStore.prod.ts")\n        .applyDiff(\n`@@ -12 +12 @@\n-function configureStore(initialState) {\n-  return createStore(rootReducer, initialState, enhancer);\n+function configureStore(initialState?: State): Store {\n+  return createStore(rootReducer, initialState, enhancer);`\n        );\n      return skill;\n    }\n  }\n};\n')),Object(o.b)("p",null,"Files can be transformed by either applying ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Diff#Unified_format"}),"diffs")," to files or by replacing strings that match a regular expression."),Object(o.b)("h1",{id:"getting-started-with-alfred"},"Getting Started with Alfred"),Object(o.b)("p",null,"To get started with alfred,"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Create a new project\nnpx alfred new my-project\ncd my-project\n\n# Build your project\nnpx alfred run build\n")),Object(o.b)("p",null,"Here is an example of what an Alfred config looks like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'// package.json\n{\n  // ...\n  "alfred": {\n    // Extend a shared Alfred config\n    "extends": "alfred-config-web-app",\n    // 3rd party skills the project uses\n    "skills": ["@alfred/skill-react"],\n    // The package manager to be used\n    "npmClient": "yarn"\n  }\n}\n')),Object(o.b)("p",null,"For more details on how to use Alfred, ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://alfred.js.org/docs/getting-started"}),"see the docs"),"."),Object(o.b)("h4",{id:"directory-structure"},"Directory Structure"),Object(o.b)("p",null,"The following is an example of the directory structure of an Alfred browser app project:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"my-project/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 app.browser.js\n\u251c\u2500\u2500 targets/\n\u2502   \u2514\u2500\u2500 app.browser.dev/\n\u2502        \u2514\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 app.browser.prod/\n\u2502        \u2514\u2500\u2500 index.js\n\u2514\u2500\u2500 package.json\n")),Object(o.b)("h1",{id:"exciting-opportunities"},"Exciting Opportunities"),Object(o.b)("p",null,"Alfred creates some exciting new oppertunities for workflows and tooling integration. Expect to see the oppertunities below in future releases!"),Object(o.b)("h4",{id:"entrypoint-specific-commands"},"Entrypoint specific commands"),Object(o.b)("p",null,"Sometimes, it is useful to run subcommands for a specific entrypoint. Alfred will allow user's to do so through the CLI:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Building a specific entrypoint\nalfred entrypoint lib.browser run build\n\n# Building all app entrypoints\nalfred entrypoint app.* run build\n")),Object(o.b)("p",null,"This will make maintaining apps with multiple entrypoints much easier."),Object(o.b)("h4",{id:"publishingdeploying-with-alfred"},"Publishing/Deploying with Alfred"),Object(o.b)("p",null,"Alfred integration with publishing and deploying can significantly simplify the deployment process for many web developers. Ideally, developers can deploy to their platform of choice just by learning a skill:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Publishing a specific entrypoint\n# By default, libs and node apps are published to npm registry\nalfred entrypoint lib.browser run publish\n\n# Publish all entrypoints\nalfred run publish\n\n# Publishing all app entrypoints\nalfred entrypoint app.* run publish\n\n# Publish app to GitHub Pages\nalfred learn @alfred/skill-github-pages\nalfred entrypoint app.browser run publish\n\n# Publish app to Now\nalfred learn @alfred/skill-now\nalfred entrypoints app.browser app.node run publish\n")),Object(o.b)("h4",{id:"documentation-tooling"},"Documentation Tooling"),Object(o.b)("p",null,"It can be said that one of the most undervalued pieces of JS tooling is its documentation tooling. There is much to be learned from the success of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs"}),"docs.rs"),", the standard for documentation generation for ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://rust-lang.org"}),"Rust"),". A JS equivalent of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs"}),"docs.rs")," might be of much use to the JS ecosystem."),Object(o.b)("h4",{id:"plugins-for-alfred"},"Plugins for Alfred"),Object(o.b)("p",null,"It is very common for JS tools to allow plugins to add extra functionality to tools. Take, for example, a simple rollup plugin that prints the sizes of chunks after bundling:"),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://amilajack.com/content/images/2020/03/9c0KN6W.png",alt:"9c0KN6W"}))),Object(o.b)("p",null,"A useful plugin indeed! But if we want to use this plugin across all our bundlers of all our entrypoints (parcel or webpack if you have an app entrypoint) we would need to create a new plugin for both webpack and parcel."),Object(o.b)("p",null,"Alfred can reduce the duplication of plugins with skills and tasks. Skills can return metadata from the tools they wrap. Tasks can provide an interface which skills should conform their metadata responses to."),Object(o.b)("p",null,"Here is an example of what a task may look like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// @alfred/task-build\nexport default {\n  subcommand: "build",\n  description: "Build, optimize, and bundle assets in your app",\n  runForEachTarget: true,\n  resolveSkill(skills, target) {\n    // return whichever skill you want to resolve...\n  },\n  metadataInterface: {\n    ast: type.object,\n    output: type.array.of(type.string)\n  }\n};\n')),Object(o.b)("p",null,"Below is an example of a skill that takes rollup's AST and return an object that conforms to the interface defined by the task."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// @alfred/skill-rollup\nexport default {\n  name: "rollup",\n  tasks: ["@alfred/task-build"],\n  // ...\n  metadata(rollupAst) {\n    // ...\n    return {\n      ast: {...},\n      outputs: [...]\n    };\n  }\n};\n')),Object(o.b)("p",null,"A plugin can now receive this metadata from any skill that uses the ",Object(o.b)("inlineCode",{parentName:"p"},"build")," task:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// @alfred/plugin-size\nexport default {\n  name: "size",\n  hooks: {\n    afterBuild({ metadata }) {\n      const outputSizes =\n        metadata.outputs.map(output =>\n          `${output.name} size: ${output.size}`\n        );\n      console.log(outputSizes);\n    }\n  }\n}\n')),Object(o.b)("h4",{id:"shared-asts"},"Shared ASTs"),Object(o.b)("p",null,"Sharing AST's between tools is an interesting area for investigation that can provide significantly improve the quality of JS tooling. This can improve the performance and developer experience of all JS tooling. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://romejs.dev/"}),"Rome")," is already doing this!"),Object(o.b)("h1",{id:"acknowledgements"},"Acknowledgements"),Object(o.b)("h4",{id:"prior-art"},"Prior Art"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/rust-lang/cargo"}),"Cargo")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://npmjs.org"}),"NPM"),", ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://yarnpkg.com"}),"Yarn")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://yeoman.io"}),"Yeoman")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://romejs.dev"}),"Rome")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/facebook/create-react-app"}),"create-react-app")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.github.com/react-boilerplate/react-boilerplate"}),"react-boilerplate"),", ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.github.com/electron-react-boilerplate/electron-react-boilerplate"}),"electron-react-boilerplate"),", and ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/search?q=boilerplate"}),"many many other boilerplates"))),Object(o.b)("h4",{id:"inspiration"},"Inspiration"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://parceljs.org"}),"parcel")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docker.com"}),"docker")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://elm-lang.org"}),"elm")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/rust-lang/cargo"}),"Cargo")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://yarnpkg.com"}),"Yarn")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/survivejs/webpack-merge"}),"webpack-merge"))))}p.isMDXComponent=!0},91:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,h=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);